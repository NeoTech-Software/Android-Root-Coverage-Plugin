// This file only works if the project that includes it defines:
// plugins {
//     id "com.github.dcendents.android-maven" version "2.1"
//     id "com.jfrog.bintray" version "1.8.4"
// }

// project.archivesBaseName is added by the Maven plugin to the project, the value defaults to the
// project.name property, but since project.name is basically the current folder name the desired
// archive name is often different hence the explicit assignment.
project.archivesBaseName = ARTIFACT_ID
project.version = VERSION
project.group = GROUP

install {
    repositories{
        mavenInstaller {
            // This generates POM.xml with proper parameters
            pom {
                groupId = GROUP
                artifactId = ARTIFACT_ID
                version = VERSION

                project {
                    packaging PACKAGING
                    name NAME
                    description DESCRIPTION
                    url PROJECT_WEBSITE

                    licenses {
                        license {
                            name LICENCE_NAME
                            url LICENCE_URL
                        }
                    }
                    developers {
                        developer {
                            id DEVELOPER_ID
                            name DEVELOPER_NAME
                            email DEVELOPER_EMAIL
                        }
                    }
                    scm {
                        connection SCM_CONNECTION
                        developerConnection SCM_DEV_CONNECTION
                        url SCM_URL
                    }
                }
            }
        }
    }
}

if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().hasPlugin('com.android.library')) {
    // Android libraries

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        // failOnError = false
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }

} else {
    // Java libraries
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}

artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().hasPlugin('com.android.library')) {
        archives androidSourcesJar
        archives androidJavadocsJar
    } else {
        archives sourcesJar
        archives javadocJar
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    publish = true
    configurations "archives"

    // Package information
    pkg {
        repo = "maven"
        name = ARTIFACT_ID
        desc = DESCRIPTION
        websiteUrl = PROJECT_WEBSITE
        vcsUrl = SCM_URL
        licenses = [LICENCE]
        version {
            name = VERSION
            vcsTag = VERSION
            released = new Date();
        }
    }
}

// Make sure clean and install are executed before upload.
bintrayUpload.dependsOn clean, install